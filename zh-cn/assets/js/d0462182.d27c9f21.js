"use strict";(self.webpackChunkbyconity=self.webpackChunkbyconity||[]).push([[1096],{58860:(e,a,n)=>{n.d(a,{xA:()=>y,yg:()=>c});var t=n(37953);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function g(e,a){if(null==e)return{};var n,t,l=function(e,a){if(null==e)return{};var n,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=t.createContext({}),p=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},y=function(e){var a=p(e.components);return t.createElement(i.Provider,{value:a},e.children)},o="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,y=g(e,["components","mdxType","originalType","parentName"]),o=p(n),m=l,c=o["".concat(i,".").concat(m)]||o[m]||u[m]||r;return n?t.createElement(c,s(s({ref:a},y),{},{components:n})):t.createElement(c,s({ref:a},y))}));function c(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=n.length,s=new Array(r);s[0]=m;var g={};for(var i in a)hasOwnProperty.call(a,i)&&(g[i]=a[i]);g.originalType=e,g[o]="string"==typeof e?e:l,s[1]=g;for(var p=2;p<r;p++)s[p]=n[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},56147:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>g,toc:()=>p});var t=n(75890),l=(n(37953),n(58860));const r={title:"JSON",slug:"json",hidden:!1,createdAt:"2021-07-29T12:12:52.763Z",updatedAt:"2021-09-23T04:06:29.273Z",tags:["Docs"]},s=void 0,g={unversionedId:"sql-syntax/functions/json",id:"sql-syntax/functions/json",title:"JSON",description:"Notice:",source:"@site/i18n/zh-cn/docusaurus-plugin-content-docs/current/sql-syntax/functions/json.mdx",sourceDirName:"sql-syntax/functions",slug:"/sql-syntax/functions/json",permalink:"/zh-cn/docs/sql-syntax/functions/json",draft:!1,editUrl:"https://github.com/ByConity/byconity.github.io/tree/main/i18n/zh-cn/docusaurus-plugin-content-docs/current/sql-syntax/functions/json.mdx",tags:[{label:"Docs",permalink:"/zh-cn/docs/tags/docs"}],version:"current",frontMatter:{title:"JSON",slug:"json",hidden:!1,createdAt:"2021-07-29T12:12:52.763Z",updatedAt:"2021-09-23T04:06:29.273Z",tags:["Docs"]},sidebar:"tutorialSidebar",previous:{title:"IP Address",permalink:"/zh-cn/docs/sql-syntax/functions/ip-address"},next:{title:"Map",permalink:"/zh-cn/docs/sql-syntax/functions/map"}},i={},p=[{value:"JSONExtract",id:"jsonextract",level:2},{value:"JSONExtractBool",id:"jsonextractbool",level:2},{value:"JSONExtractFloat",id:"jsonextractfloat",level:2},{value:"JSONExtractInt",id:"jsonextractint",level:2},{value:"JSONExtractKeysAndValues",id:"jsonextractkeysandvalues",level:2},{value:"JSONExtractRaw",id:"jsonextractraw",level:2},{value:"JSONExtractString",id:"jsonextractstring",level:2},{value:"JSONExtractUInt",id:"jsonextractuint",level:2},{value:"JSONHas",id:"jsonhas",level:2},{value:"JSONLength",id:"jsonlength",level:2},{value:"JSONType",id:"jsontype",level:2},{value:"visitParamExtractBool",id:"visitparamextractbool",level:2},{value:"visitParamExtractFloat",id:"visitparamextractfloat",level:2},{value:"visitParamExtractInt",id:"visitparamextractint",level:2},{value:"visitParamExtractRaw",id:"visitparamextractraw",level:2},{value:"visitParamExtractString",id:"visitparamextractstring",level:2},{value:"visitParamExtractUInt",id:"visitparamextractuint",level:2},{value:"visitParamHas",id:"visitparamhas",level:2}],y={toc:p},o="wrapper";function u(e){let{components:a,...n}=e;return(0,l.yg)(o,(0,t.A)({},y,n,{components:a,mdxType:"MDXLayout"}),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"Notice:\nSome of the examples below are referenced from ",(0,l.yg)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/functions/"},"ClickHouse Documentation")," but have been adapted and modified to work in ByConity.")),(0,l.yg)("h2",{id:"jsonextract"},"JSONExtract"),(0,l.yg)("p",null,"Parses a JSON and extract a value of the given ByConity data type.\nThis is a generalization of the previous ",(0,l.yg)("inlineCode",{parentName:"p"},"JSONExtract<type>")," functions.\nThis means\n",(0,l.yg)("inlineCode",{parentName:"p"},"JSONExtract(..., 'String')")," returns exactly the same as ",(0,l.yg)("inlineCode",{parentName:"p"},"JSONExtractString()")," ,\n",(0,l.yg)("inlineCode",{parentName:"p"},"JSONExtract(..., 'Float64')")," returns exactly the same as ",(0,l.yg)("inlineCode",{parentName:"p"},"JSONExtractFloat()")," ."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Syntax")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"JSONExtract(json[, indices_or_keys\u2026], Return_type)\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"json")," \u2013 json string."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"indices_or_keys")," - is a list of zero or more arguments each of them can be either string or integer.",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"String = access object member by key."),(0,l.yg)("li",{parentName:"ul"},"Positive integer = access the n-th member/key from the beginning."),(0,l.yg)("li",{parentName:"ul"},"Negative integer = access the n-th member/key from the end."),(0,l.yg)("li",{parentName:"ul"},"Minimum index of the element is 1. Thus the element 0 does not exist."),(0,l.yg)("li",{parentName:"ul"},"You may use integers to access both JSON arrays and JSON objects."))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"Return_type")," \u2013 ByConity data type.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returned value")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Extracted value of the given ByConity data type.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},'SELECT JSONExtract(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'Tuple(String, Array(Float64))\')\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},'\u250c\u2500JSONExtract(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'Tuple(String, Array(Float64))\')\u2500\u2510\n\u2502 (hello, [-1e+02, 2e+02, 3e+02])                                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT JSONExtract('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b', 'Array(Nullable(Int8))')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500JSONExtract('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b', 'Array(Nullable(Int8))')\u2500\u2510\n\u2502 [-100, \u1d3a\u1d41\u1d38\u1d38, \u1d3a\u1d41\u1d38\u1d38]                                                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT JSONExtract('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b', 4, 'Nullable(Int64)')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500JSONExtract('{\"a\": \"hello\", \"b\": [-100, 200.0, 300]}', 'b', 4, 'Nullable(Int64)')\u2500\u2510\n\u2502 \u1d3a\u1d41\u1d38\u1d38                                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT JSONExtract('{\"passed\": true}', 'passed', 'UInt8')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500JSONExtract('{\"passed\": true}', 'passed', 'UInt8')\u2500\u2510\n\u2502 1                                                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT JSONExtract('{\"day\": \"Thursday\"}', 'day', 'Enum8(\\'Sunday\\' = 0, \\'Monday\\' = 1, \\'Tuesday\\' = 2, \\'Wednesday\\' = 3, \\'Thursday\\' = 4, \\'Friday\\' = 5, \\'Saturday\\' = 6)')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500JSONExtract('{\"day\": \"Thursday\"}', 'day', 'Enum8(\\'Sunday\\' = 0, \\'Monday\\' = 1, \\'Tuesday\\' = 2, \\'Wednesday\\' = 3, \\'Thursday\\' = 4, \\'Friday\\' = 5, \\'Saturday\\' = 6)')\u2500\u2510\n\u2502 Thursday                                                                                                                                                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT JSONExtract('{\"day\": 5}', 'day', 'Enum8(\\'Sunday\\' = 0, \\'Monday\\' = 1, \\'Tuesday\\' = 2, \\'Wednesday\\' = 3, \\'Thursday\\' = 4, \\'Friday\\' = 5, \\'Saturday\\' = 6)')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500JSONExtract('{\"day\": 5}', 'day', 'Enum8(\\'Sunday\\' = 0, \\'Monday\\' = 1, \\'Tuesday\\' = 2, \\'Wednesday\\' = 3, \\'Thursday\\' = 4, \\'Friday\\' = 5, \\'Saturday\\' = 6)')\u2500\u2510\n\u2502 Friday                                                                                                                                                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.yg)("h2",{id:"jsonextractbool"},"JSONExtractBool"),(0,l.yg)("p",null,"Parses a JSON and extract a value. These functions are similar to ",(0,l.yg)("inlineCode",{parentName:"p"},"visitParam")," functions.\nIf the value does not exist or has a wrong type, ",(0,l.yg)("inlineCode",{parentName:"p"},"0")," will be returned."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Syntax")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"JSONExtractBool(json\\[, indices_or_keys\\]\u2026)\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"json")," \u2013 json string."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"indices_or_keys")," - is a list of zero or more arguments each of them can be either string or integer.",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"String = access object member by key."),(0,l.yg)("li",{parentName:"ul"},"Positive integer = access the n-th member/key from the beginning."),(0,l.yg)("li",{parentName:"ul"},"Negative integer = access the n-th member/key from the end."),(0,l.yg)("li",{parentName:"ul"},"Minimum index of the element is 1. Thus the element 0 does not exist."),(0,l.yg)("li",{parentName:"ul"},"You may use integers to access both JSON arrays and JSON objects.")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returned value")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"UInt8.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT JSONExtractBool('{\"passed\": true}','passed')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500JSONExtractBool('{\"passed\": true}', 'passed')\u2500\u2510\n\u2502 1                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT JSONExtractBool('{\"passed\": false}','passed')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500JSONExtractBool('{\"passed\": false}', 'passed')\u2500\u2510\n\u2502 0                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.yg)("h2",{id:"jsonextractfloat"},"JSONExtractFloat"),(0,l.yg)("p",null,"Parses a JSON and extract a value. These functions are similar to ",(0,l.yg)("inlineCode",{parentName:"p"},"visitParam")," functions.\nIf the value does not exist or has a wrong type, ",(0,l.yg)("inlineCode",{parentName:"p"},"0")," will be returned."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Syntax")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"JSONExtractFloat(json\\[, indices_or_keys\\]\u2026)\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"json")," \u2013 json string."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"indices_or_keys")," - is a list of zero or more arguments each of them can be either string or integer.",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"String = access object member by key."),(0,l.yg)("li",{parentName:"ul"},"Positive integer = access the n-th member/key from the beginning."),(0,l.yg)("li",{parentName:"ul"},"Negative integer = access the n-th member/key from the end."),(0,l.yg)("li",{parentName:"ul"},"Minimum index of the element is 1. Thus the element 0 does not exist."),(0,l.yg)("li",{parentName:"ul"},"You may use integers to access both JSON arrays and JSON objects.")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returned value")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Float64.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},'SELECT JSONExtractFloat(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'b\', 2)\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},'\u250c\u2500JSONExtractFloat(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'b\', 2)\u2500\u2510\n\u2502 2e+02                                                               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.yg)("h2",{id:"jsonextractint"},"JSONExtractInt"),(0,l.yg)("p",null,"Parses a JSON and extract a value. These functions are similar to ",(0,l.yg)("inlineCode",{parentName:"p"},"visitParam")," functions.\nIf the value does not exist or has a wrong type, ",(0,l.yg)("inlineCode",{parentName:"p"},"0")," will be returned."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Syntax")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"JSONExtractInt(json\\[, indices_or_keys\\]\u2026)\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"json")," \u2013 json string."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"indices_or_keys")," - is a list of zero or more arguments each of them can be either string or integer.",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"String = access object member by key."),(0,l.yg)("li",{parentName:"ul"},"Positive integer = access the n-th member/key from the beginning."),(0,l.yg)("li",{parentName:"ul"},"Negative integer = access the n-th member/key from the end."),(0,l.yg)("li",{parentName:"ul"},"Minimum index of the element is 1. Thus the element 0 does not exist."),(0,l.yg)("li",{parentName:"ul"},"You may use integers to access both JSON arrays and JSON objects.")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returned value")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Int64.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},'SELECT JSONExtractInt(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'b\', 1)\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},'\u250c\u2500JSONExtractInt(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'b\', 1)\u2500\u2510\n\u2502 -100                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.yg)("h2",{id:"jsonextractkeysandvalues"},"JSONExtractKeysAndValues"),(0,l.yg)("p",null,"Parses key-value pairs from a JSON where the values are of the given ByConity data type."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Syntax")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"JSONExtractKeysAndValues(json[, indices_or_keys\u2026], Value_type)\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"json")," \u2013 json string."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"indices_or_keys")," - is a list of zero or more arguments each of them can be either string or integer.",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"String = access object member by key."),(0,l.yg)("li",{parentName:"ul"},"Positive integer = access the n-th member/key from the beginning."),(0,l.yg)("li",{parentName:"ul"},"Negative integer = access the n-th member/key from the end."),(0,l.yg)("li",{parentName:"ul"},"Minimum index of the element is 1. Thus the element 0 does not exist."),(0,l.yg)("li",{parentName:"ul"},"You may use integers to access both JSON arrays and JSON objects."))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"Value_type")," - json value data type")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returned value")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"key-value pairs")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},'SELECT JSONExtractKeysAndValues(\'{"x": {"a": 5, "b": 7, "c": 11}}\', \'x\', \'Int8\');\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},'\u250c\u2500JSONExtractKeysAndValues(\'{"x": {"a": 5, "b": 7, "c": 11}}\', \'x\', \'Int8\')\u2500\u2510\n\u2502 [(a, 5), (b, 7), (c, 11)]                                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.yg)("h2",{id:"jsonextractraw"},"JSONExtractRaw"),(0,l.yg)("p",null,"Returns a part of JSON as unparsed string.\nIf the part does not exist or has a wrong type, an empty string will be returned."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Syntax")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"JSONExtractRaw(json\\[, indices_or_keys\\]\u2026)\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"json")," \u2013 json string."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"indices_or_keys")," - is a list of zero or more arguments each of them can be either string or integer.",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"String = access object member by key."),(0,l.yg)("li",{parentName:"ul"},"Positive integer = access the n-th member/key from the beginning."),(0,l.yg)("li",{parentName:"ul"},"Negative integer = access the n-th member/key from the end."),(0,l.yg)("li",{parentName:"ul"},"Minimum index of the element is 1. Thus the element 0 does not exist."),(0,l.yg)("li",{parentName:"ul"},"You may use integers to access both JSON arrays and JSON objects.")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returned value")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"String")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},'SELECT JSONExtractRaw(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'b\');\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},'\u250c\u2500JSONExtractRaw(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'b\')\u2500\u2510\n\u2502 [-100,200,300]                                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.yg)("h2",{id:"jsonextractstring"},"JSONExtractString"),(0,l.yg)("p",null,"Parse a JSON and extract a string. This function is similar to ",(0,l.yg)("inlineCode",{parentName:"p"},"visitParamExtractString")," functions.\nIf the value does not exist or has a wrong type, an empty string will be returned.\nThe value is unescaped. If unescaping failed, it returns an empty string."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Syntax")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"JSONExtractString(json\\[, indices_or_keys\\]\u2026)\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"json")," \u2013 json string."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"indices_or_keys")," - is a list of zero or more arguments each of them can be either string or integer.",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"String = access object member by key."),(0,l.yg)("li",{parentName:"ul"},"Positive integer = access the n-th member/key from the beginning."),(0,l.yg)("li",{parentName:"ul"},"Negative integer = access the n-th member/key from the end."),(0,l.yg)("li",{parentName:"ul"},"Minimum index of the element is 1. Thus the element 0 does not exist."),(0,l.yg)("li",{parentName:"ul"},"You may use integers to access both JSON arrays and JSON objects.")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returned value")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"String")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},'SELECT JSONExtractString(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'a\')\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},'\u250c\u2500JSONExtractString(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'a\')\u2500\u2510\n\u2502 hello                                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT JSONExtractString('{\"abc\":\"\\\\u263a\"}', 'abc')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500JSONExtractString('{\"abc\":\"\\\\u263a\"}', 'abc')\u2500\u2510\n\u2502 \u263a                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT JSONExtractString('{\"abc\":\"\\\\u263\"}', 'abc')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500JSONExtractString('{\"abc\":\"\\\\u263\"}', 'abc')\u2500\u2510\n\u2502                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT JSONExtractString('{\"abc\":\"hello}', 'abc')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500JSONExtractString('{\"abc\":\"hello}', 'abc')\u2500\u2510\n\u2502                                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.yg)("h2",{id:"jsonextractuint"},"JSONExtractUInt"),(0,l.yg)("p",null,"Parses a JSON and extract a value. These functions are similar to ",(0,l.yg)("inlineCode",{parentName:"p"},"visitParam")," functions.\nIf the value does not exist or has a wrong type, ",(0,l.yg)("inlineCode",{parentName:"p"},"0")," will be returned."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Syntax")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"JSONExtractUInt(json\\[, indices_or_keys\\]\u2026)\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"json")," \u2013 json string."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"indices_or_keys")," - is a list of zero or more arguments each of them can be either string or integer.",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"String = access object member by key."),(0,l.yg)("li",{parentName:"ul"},"Positive integer = access the n-th member/key from the beginning."),(0,l.yg)("li",{parentName:"ul"},"Negative integer = access the n-th member/key from the end."),(0,l.yg)("li",{parentName:"ul"},"Minimum index of the element is 1. Thus the element 0 does not exist."),(0,l.yg)("li",{parentName:"ul"},"You may use integers to access both JSON arrays and JSON objects.")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returned value")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"UInt64.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},'SELECT JSONExtractUInt(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'b\', -1)\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},'\u250c\u2500JSONExtractUInt(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'b\', -1)\u2500\u2510\n\u2502 300                                                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.yg)("h2",{id:"jsonhas"},"JSONHas"),(0,l.yg)("p",null,"If the value exists in the JSON document, ",(0,l.yg)("inlineCode",{parentName:"p"},"1")," will be returned.\nIf the value does not exist, ",(0,l.yg)("inlineCode",{parentName:"p"},"0")," will be returned."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Syntax")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"JSONHas(json[, indices_or_keys]\u2026)\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"json")," \u2013 json string."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"indices_or_keys")," - is a list of zero or more arguments each of them can be either string or integer.",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"String = access object member by key."),(0,l.yg)("li",{parentName:"ul"},"Positive integer = access the n-th member/key from the beginning."),(0,l.yg)("li",{parentName:"ul"},"Negative integer = access the n-th member/key from the end."),(0,l.yg)("li",{parentName:"ul"},"Minimum index of the element is 1. Thus the element 0 does not exist."),(0,l.yg)("li",{parentName:"ul"},"You may use integers to access both JSON arrays and JSON objects.")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returned value")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"UInt8.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},'SELECT JSONExtractUInt(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'b\', -1)\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},'\u250c\u2500JSONHas(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'b\')\u2500\u2510\n\u2502 1                                                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},'SELECT JSONHas(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'b\', 4)\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},'\u250c\u2500JSONHas(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'b\', 4)\u2500\u2510\n\u2502 0                                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.yg)("h2",{id:"jsonlength"},"JSONLength"),(0,l.yg)("p",null,"Return the length of a JSON array or a JSON object."),(0,l.yg)("p",null,"If the value does not exist or has a wrong type, ",(0,l.yg)("inlineCode",{parentName:"p"},"0")," will be returned."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Syntax")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"JSONLength(json\\[, indices_or_keys\\]\u2026)\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"json")," \u2013 json string."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"indices_or_keys")," - is a list of zero or more arguments each of them can be either string or integer.",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"String = access object member by key."),(0,l.yg)("li",{parentName:"ul"},"Positive integer = access the n-th member/key from the beginning."),(0,l.yg)("li",{parentName:"ul"},"Negative integer = access the n-th member/key from the end."),(0,l.yg)("li",{parentName:"ul"},"Minimum index of the element is 1. Thus the element 0 does not exist."),(0,l.yg)("li",{parentName:"ul"},"You may use integers to access both JSON arrays and JSON objects.")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returned value")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"UInt64.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},'SELECT JSONLength(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'b\')\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},'\u250c\u2500JSONLength(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'b\')\u2500\u2510\n\u2502 3                                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},'SELECT JSONLength(\'{"a": "hello", "b": [-100, 200.0, 300]}\')\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},'\u250c\u2500JSONLength(\'{"a": "hello", "b": [-100, 200.0, 300]}\')\u2500\u2510\n\u2502 2                                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.yg)("h2",{id:"jsontype"},"JSONType"),(0,l.yg)("p",null,"Return the type of a JSON value."),(0,l.yg)("p",null,"If the value does not exist, ",(0,l.yg)("inlineCode",{parentName:"p"},"Null")," will be returned."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Syntax")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"JSONType(json\\[, indices_or_keys\\]\u2026)\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"json")," \u2013 json string."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"indices_or_keys")," - is a list of zero or more arguments each of them can be either string or integer.",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"String = access object member by key."),(0,l.yg)("li",{parentName:"ul"},"Positive integer = access the n-th member/key from the beginning."),(0,l.yg)("li",{parentName:"ul"},"Negative integer = access the n-th member/key from the end."),(0,l.yg)("li",{parentName:"ul"},"Minimum index of the element is 1. Thus the element 0 does not exist."),(0,l.yg)("li",{parentName:"ul"},"You may use integers to access both JSON arrays and JSON objects.")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returned value")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"ByConity data type.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},'SELECT JSONType(\'{"a": "hello", "b": [-100, 200.0, 300]}\')\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},'\u250c\u2500JSONType(\'{"a": "hello", "b": [-100, 200.0, 300]}\')\u2500\u2510\n\u2502 Object                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},'SELECT JSONType(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'a\')\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},'\u250c\u2500JSONType(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'a\')\u2500\u2510\n\u2502 String                                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},'SELECT JSONType(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'b\')\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},'\u250c\u2500JSONType(\'{"a": "hello", "b": [-100, 200.0, 300]}\', \'b\')\u2500\u2510\n\u2502 Array                                                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.yg)("h2",{id:"visitparamextractbool"},"visitParamExtractBool"),(0,l.yg)("p",null,"Parses a true/false value. The result is UInt8."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Syntax")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"visitParamExtractBool(params, name)\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"params")," \u2013 json string."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"name")," - json key")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returned value")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"UInt8.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT visitParamExtractBool('{\"abc\":true}', 'abc')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500visitParamExtractBool('{\"abc\":true}', 'abc')\u2500\u2510\n\u2502 1                                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT visitParamExtractBool('{\"abc\":false}', 'abc')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500visitParamExtractBool('{\"abc\":false}', 'abc')\u2500\u2510\n\u2502 0                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.yg)("h2",{id:"visitparamextractfloat"},"visitParamExtractFloat"),(0,l.yg)("p",null,"Parses a float value. The result is Float64."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Syntax")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"visitParamExtractFloat(params, name)\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"params")," \u2013 json string."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"name")," - json key")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returned value")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"UInt8.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT visitParamExtractFloat('{\"abc\":123.0}', 'abc')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500visitParamExtractFloat('{\"abc\":123.1}', 'abc')\u2500\u2510\n\u2502 123.1                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.yg)("h2",{id:"visitparamextractint"},"visitParamExtractInt"),(0,l.yg)("p",null,"Parses a Int value. The result is Int64."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Syntax")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"visitParamExtractInt(params, name)\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"params")," \u2013 json string."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"name")," - json key")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returned value")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Int64.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT visitParamExtractInt('{\"abc\":123}', 'abc')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500visitParamExtractInt('{\"abc\":123}', 'abc')\u2500\u2510\n\u2502 123                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.yg)("h2",{id:"visitparamextractraw"},"visitParamExtractRaw"),(0,l.yg)("p",null,"Returns the value of a field, including separators."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Syntax")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"visitParamExtractRaw(params, name)\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"params")," \u2013 json string."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"name")," - json key")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returned value")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"String.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT visitParamExtractRaw('{\"abc\":\"\\\\n\\\\u0000\"}', 'abc')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},'\u250c\u2500visitParamExtractRaw(\'{"abc":"\\\\n\\\\u0000"}\', \'abc\')\u2500\u2510\n\u2502 "\\n\\u0000"                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT visitParamExtractRaw('{\"abc\":{\"def\":[1,2,3]}}', 'abc')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},'\u250c\u2500visitParamExtractRaw(\'{"abc":{"def":[1,2,3]}}\', \'abc\')\u2500\u2510\n\u2502 {"def":[1,2,3]}                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.yg)("h2",{id:"visitparamextractstring"},"visitParamExtractString"),(0,l.yg)("p",null,"Parses the string in double quotes. The value is unescaped. If unescaping failed, it returns an empty string."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Syntax")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"visitParamExtractString(params, name)\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"params")," \u2013 json string."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"name")," - json key")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returned value")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"String.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT visitParamExtractString('{\"abc\":\"\\\\u263a\"}', 'abc')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500visitParamExtractString('{\"abc\":\"\\\\u263a\"}', 'abc')\u2500\u2510\n\u2502 \u263a                                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT visitParamExtractString('{\"abc\":\"\\\\u263\"}', 'abc')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500visitParamExtractString('{\"abc\":\"\\\\u263\"}', 'abc')\u2500\u2510\n\u2502                                                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT visitParamExtractString('{\"abc\":\"hello}', 'abc')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500visitParamExtractString('{\"abc\":\"hello}', 'abc')\u2500\u2510\n\u2502                                                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.yg)("p",null,"There is currently no support for code points in the format ",(0,l.yg)("inlineCode",{parentName:"p"},"\\uXXXX\\uYYYY")," that are not from the basic multilingual plane (they are converted to CESU-8 instead of UTF-8)."),(0,l.yg)("p",null,"The following functions are based on ",(0,l.yg)("a",{parentName:"p",href:"https://github.com/lemire/simdjson"},"simdjson")," designed for more complex JSON parsing requirements. The assumption 2 mentioned above still applies."),(0,l.yg)("h2",{id:"visitparamextractuint"},"visitParamExtractUInt"),(0,l.yg)("p",null,"Parses UInt64 from the value of the field named ",(0,l.yg)("inlineCode",{parentName:"p"},"name")," . If this is a string field, it tries to parse a number from the beginning of the string. If the field does not exist, or it exists but does not contain a number, it returns 0."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Syntax")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"visitParamExtractUInt(params, name)\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"params")," \u2013 json string."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"name")," - json key")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returned value")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"UInt64.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT visitParamExtractUInt('{\"abc\":2}', 'abc')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500visitParamExtractUInt('{\"abc\":2}', 'abc')\u2500\u2510\n\u2502 2                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.yg)("h2",{id:"visitparamhas"},"visitParamHas"),(0,l.yg)("p",null,"Checks whether there is a field with the ",(0,l.yg)("inlineCode",{parentName:"p"},"name")," name."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Syntax")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"visitParamHas(params, name)\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"params")," \u2013 json string."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"name")," - json key")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returned value")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"UInt8.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT visitParamHas('{\"abc\":\"def\"}', 'abc')\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500visitParamHas('{\"abc\":\"def\"}', 'abc')\u2500\u2510\n\u2502 1                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")))}u.isMDXComponent=!0}}]);