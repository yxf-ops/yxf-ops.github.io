"use strict";(self.webpackChunkbyconity=self.webpackChunkbyconity||[]).push([[1839],{58860:(e,a,n)=>{n.d(a,{xA:()=>y,yg:()=>h});var l=n(37953);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);a&&(l=l.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,l)}return n}function p(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,l,t=function(e,a){if(null==e)return{};var n,l,t={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var g=l.createContext({}),u=function(e){var a=l.useContext(g),n=a;return e&&(n="function"==typeof e?e(a):p(p({},a),e)),n},y=function(e){var a=u(e.components);return l.createElement(g.Provider,{value:a},e.children)},i="mdxType",o={inlineCode:"code",wrapper:function(e){var a=e.children;return l.createElement(l.Fragment,{},a)}},m=l.forwardRef((function(e,a){var n=e.components,t=e.mdxType,r=e.originalType,g=e.parentName,y=s(e,["components","mdxType","originalType","parentName"]),i=u(n),m=t,h=i["".concat(g,".").concat(m)]||i[m]||o[m]||r;return n?l.createElement(h,p(p({ref:a},y),{},{components:n})):l.createElement(h,p({ref:a},y))}));function h(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var r=n.length,p=new Array(r);p[0]=m;var s={};for(var g in a)hasOwnProperty.call(a,g)&&(s[g]=a[g]);s.originalType=e,s[i]="string"==typeof e?e:t,p[1]=s;for(var u=2;u<r;u++)p[u]=n[u];return l.createElement.apply(null,p)}return l.createElement.apply(null,n)}m.displayName="MDXCreateElement"},62795:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>g,contentTitle:()=>p,default:()=>o,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var l=n(75890),t=(n(37953),n(58860));const r={title:"Hash",slug:"hash",hidden:!1,createdAt:"2021-07-29T12:05:52.839Z",updatedAt:"2021-09-23T04:02:59.496Z",tags:["Docs"]},p=void 0,s={unversionedId:"sql-syntax/functions/hash",id:"version-0.2.0/sql-syntax/functions/hash",title:"Hash",description:"Notice:",source:"@site/i18n/zh-cn/docusaurus-plugin-content-docs/version-0.2.0/sql-syntax/functions/hash.mdx",sourceDirName:"sql-syntax/functions",slug:"/sql-syntax/functions/hash",permalink:"/zh-cn/docs/0.2.0/sql-syntax/functions/hash",draft:!1,editUrl:"https://github.com/ByConity/byconity.github.io/tree/main/i18n/zh-cn/docusaurus-plugin-content-docs/version-0.2.0/sql-syntax/functions/hash.mdx",tags:[{label:"Docs",permalink:"/zh-cn/docs/0.2.0/tags/docs"}],version:"0.2.0",frontMatter:{title:"Hash",slug:"hash",hidden:!1,createdAt:"2021-07-29T12:05:52.839Z",updatedAt:"2021-09-23T04:02:59.496Z",tags:["Docs"]},sidebar:"tutorialSidebar",previous:{title:"Geo",permalink:"/zh-cn/docs/0.2.0/sql-syntax/functions/geo"},next:{title:"IP Address",permalink:"/zh-cn/docs/0.2.0/sql-syntax/functions/ip-address"}},g={},u=[{value:"MD5",id:"md5",level:2},{value:"SHA1",id:"sha1",level:2},{value:"SHA224",id:"sha224",level:2},{value:"SHA256",id:"sha256",level:2},{value:"URLHash",id:"urlhash",level:2},{value:"cityHash64",id:"cityhash64",level:2},{value:"farmHash64",id:"farmhash64",level:2},{value:"gccMurmurHash",id:"gccmurmurhash",level:2},{value:"halfMD5",id:"halfmd5",level:2},{value:"hiveHash",id:"hivehash",level:2},{value:"intHash32",id:"inthash32",level:2},{value:"intHash64",id:"inthash64",level:2},{value:"javaHash",id:"javahash",level:2},{value:"jumpConsistentHash",id:"jumpconsistenthash",level:2},{value:"metroHash64",id:"metrohash64",level:2},{value:"murmurHash2_32",id:"murmurhash2_32",level:2},{value:"murmurHash2_64",id:"murmurhash2_64",level:2},{value:"murmurHash3_128",id:"murmurhash3_128",level:2},{value:"murmurHash3_32",id:"murmurhash3_32",level:2},{value:"murmurHash3_64",id:"murmurhash3_64",level:2},{value:"sipHash128",id:"siphash128",level:2},{value:"sipHash64",id:"siphash64",level:2},{value:"xxHash32",id:"xxhash32",level:2},{value:"xxHash64",id:"xxhash64",level:2}],y={toc:u},i="wrapper";function o(e){let{components:a,...n}=e;return(0,t.yg)(i,(0,l.A)({},y,n,{components:a,mdxType:"MDXLayout"}),(0,t.yg)("blockquote",null,(0,t.yg)("p",{parentName:"blockquote"},"Notice:\nSome of the examples below are referenced from ",(0,t.yg)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/functions/"},"ClickHouse Documentation")," but have been adapted and modified to work in ByConity.")),(0,t.yg)("h2",{id:"md5"},"MD5"),(0,t.yg)("p",null,"Calculates the MD5 from a string and returns the resulting set of bytes as FixedString(16)."),(0,t.yg)("p",null,"If you do not need MD5 in particular, but you need a decent cryptographic 128-bit hash, use the ","[sipHash128]"," function instead."),(0,t.yg)("p",null,"If you want to get the same result as output by the md5sum utility, use lower(hex(MD5(s)))."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"select MD5(string)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"string")," \u2013 A string")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned value")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"The Value of MD5.")),(0,t.yg)("p",null,"Type: FixedString(16)"),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"select MD5('test the MD5 function')\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500MD5('test the MD5 function')\u2500\u2510\n\u2502 \u094b?N?iq@?5G?:a               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"sha1"},"SHA1"),(0,t.yg)("p",null,"Calculates SHA-1, SHA-224, or SHA-256 from a string and returns the resulting set of bytes as FixedString(20), FixedString(28), or FixedString(32)."),(0,t.yg)("p",null,"The function works fairly slowly (SHA-1 processes about 5 million short strings per second per processor core, while SHA-224 and SHA-256 process about 2.2 million)."),(0,t.yg)("p",null,"We recommend using this function only in cases when you need a specific hash function and you can\u2019t select it."),(0,t.yg)("p",null,"Even in these cases, we recommend applying the function offline and pre-calculating values when inserting them into the table, instead of applying it in SELECTS."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SHA1(string)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"string")," \u2013 A string.")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned value")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"SHA-1 Encrypted string in ",(0,t.yg)("inlineCode",{parentName:"li"},"FixedString(20)"),".")),(0,t.yg)("p",null,"Type: ",(0,t.yg)("inlineCode",{parentName:"p"},"FixedString(20)")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT base64Encode(toString(SHA1('SAH1 test')))\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500base64Encode(toString(SHA1('SAH1 test')))\u2500\u2510\n\u2502 x5bDmJsgE+YzTir1+BPt4S98AEc=              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"sha224"},"SHA224"),(0,t.yg)("p",null,"Calculates SHA-1, SHA-224, or SHA-256 from a string and returns the resulting set of bytes as FixedString(20), FixedString(28), or FixedString(32)."),(0,t.yg)("p",null,"The function works fairly slowly (SHA-1 processes about 5 million short strings per second per processor core, while SHA-224 and SHA-256 process about 2.2 million)."),(0,t.yg)("p",null,"We recommend using this function only in cases when you need a specific hash function and you can\u2019t select it."),(0,t.yg)("p",null,"Even in these cases, we recommend applying the function offline and pre-calculating values when inserting them into the table, instead of applying it in SELECTS."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SHA224(string)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"string")," \u2013 A string.")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned value")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"SHA-224 Encrypted string in ",(0,t.yg)("inlineCode",{parentName:"li"},"FixedString(28)"),".")),(0,t.yg)("p",null,"Type: ",(0,t.yg)("inlineCode",{parentName:"p"},"FixedString(28)")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT base64Encode(toString(SHA224('SAH224 test')))\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500base64Encode(toString(SHA224('SAH224 test')))\u2500\u2510\n\u2502 eptUvYjJG4AeQfQI9kZ/qViECg0gRbuwPJ5UlA==      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"sha256"},"SHA256"),(0,t.yg)("p",null,"Calculates SHA-1, SHA-224, or SHA-256 from a string and returns the resulting set of bytes as FixedString(20), FixedString(28), or FixedString(32)."),(0,t.yg)("p",null,"The function works fairly slowly (SHA-1 processes about 5 million short strings per second per processor core, while SHA-224 and SHA-256 process about 2.2 million)."),(0,t.yg)("p",null,"We recommend using this function only in cases when you need a specific hash function and you can\u2019t select it."),(0,t.yg)("p",null,"Even in these cases, we recommend applying the function offline and pre-calculating values when inserting them into the table, instead of applying it in SELECTS."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SHA256(string)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"string")," \u2013 A string.")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned value")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"SHA-256 Encrypted string in ",(0,t.yg)("inlineCode",{parentName:"li"},"FixedString(32)"),".")),(0,t.yg)("p",null,"Type: ",(0,t.yg)("inlineCode",{parentName:"p"},"FixedString(32)")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT base64Encode(toString(SHA256('SAH256 test')))\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500base64Encode(toString(SHA256('SAH256 test')))\u2500\u2510\n\u2502 I+OvFrLmD2Ofq1xBuFmKYCuB6iSg5/OrhcIbI5Qezs8=  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"urlhash"},"URLHash"),(0,t.yg)("p",null,"A fast, decent-quality non-cryptographic hash function for a string obtained from a URL using some type of normalization."),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"URLHash(s)")," \u2013 Calculates a hash from a string without one of the trailing symbols ",(0,t.yg)("inlineCode",{parentName:"p"},"/")," , ",(0,t.yg)("inlineCode",{parentName:"p"},"?")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"#")," at the end, if present."),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"URLHash(s, N)")," \u2013 Calculates a hash from a string up to the N level in the URL hierarchy, without one of the trailing symbols ",(0,t.yg)("inlineCode",{parentName:"p"},"/")," , ",(0,t.yg)("inlineCode",{parentName:"p"},"?")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"#")," at the end, if present."),(0,t.yg)("p",null,"Levels are the same as in URLHierarchy. This function is specific to Yandex.Metrica."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"URLHash(s,N)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"s")," \u2013 The URL string."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"N")," \u2013 The number of level in UInt.")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned value")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"The hash value in UInt64")),(0,t.yg)("p",null,"Type: ",(0,t.yg)("inlineCode",{parentName:"p"},"Uint64")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT URLHash('https://www.bytedance.com/en/news',2)\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500URLHash('https://www.bytedance.com/en/news', 2)\u2500\u2510\n\u2502 11898456355197509749                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"cityhash64"},"cityHash64"),(0,t.yg)("p",null,"Produces a 64-bit ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/google/cityhash"},"CityHash")," hash value."),(0,t.yg)("p",null,"This is a fast non-cryptographic hash function. It uses the CityHash algorithm for string parameters and implementation-specific fast non-cryptographic hash function for parameters with other data types. The function uses the CityHash combinator to get the final results."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"cityHash64(par1,...)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("p",null,"The function takes a variable number of input parameters. Arguments can be any of the ",(0,t.yg)("a",{parentName:"p",href:"https://bytedance.feishu.cn/sql-reference/data-types/index.md"},"supported data types")," ."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned Value")),(0,t.yg)("p",null,"A ",(0,t.yg)("inlineCode",{parentName:"p"},"UInt64"),"data type hash value."),(0,t.yg)("p",null,"Type:",(0,t.yg)("inlineCode",{parentName:"p"},"UInt64")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Examples")),(0,t.yg)("p",null,"Call example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT cityHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS CityHash, toTypeName(CityHash) AS type;\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500CityHash\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\n\u2502 16754903278969853710 \u2502 UInt64 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("p",null,"The following example shows how to compute the checksum of the entire table with accuracy up to the row order:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT groupBitXor(cityHash64(*)) FROM table\n")),(0,t.yg)("h2",{id:"farmhash64"},"farmHash64"),(0,t.yg)("p",null,"Produces a 64-bit ","[FarmHash]"," or Fingerprint value. ",(0,t.yg)("inlineCode",{parentName:"p"},"farmFingerprint64")," is preferred for a stable and portable value."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"farmFingerprint64(par1, ...)\n\nfarmHash64(par1, ...)\n")),(0,t.yg)("p",null,"These functions use the ",(0,t.yg)("inlineCode",{parentName:"p"},"Fingerprint64")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"Hash64")," methods respectively from all ","[available methods]"," ."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("p",null,"The function takes a variable number of input parameters. Arguments can be any of the ","[supported data types]","."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned Value")),(0,t.yg)("p",null,"An",(0,t.yg)("inlineCode",{parentName:"p"},"UInt64"),"data type hash value."),(0,t.yg)("p",null,"Tyep:",(0,t.yg)("inlineCode",{parentName:"p"},"UInt64")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT farmHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS FarmHash, toTypeName(FarmHash) AS type;\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500FarmHash\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\n\u2502 16660843471760112397 \u2502 UInt64 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"gccmurmurhash"},"gccMurmurHash"),(0,t.yg)("p",null,"Calculates a 64-bit ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/aappleby/smhasher"},"MurmurHash2")," hash value using the same hash seed as ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/gcc-mirror/gcc/blob/41d6b10e96a1de98e90a7c0378437c3255814b16/libstdc++-v3/include/bits/functional_hash.h#L191"},"gcc")," . It is portable between CLang and GCC builds."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"gccMurmurHash(par1, ...)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"par1, ...")," \u2014 A variable number of parameters that can be any of the ","[supported data types]",".")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned value")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Calculated hash value.")),(0,t.yg)("p",null,"Type: ",(0,t.yg)("inlineCode",{parentName:"p"},"UInt64"),"."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("p",null,"Query:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT gccMurmurHash(1, 2, 3) AS res1,gccMurmurHash(('a', [1, 2, 3], 4, (4, ['foo', 'bar'], 1, (1, 2)))) AS res2;\n\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500res1\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500res2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 12384823029245979431 \u2502 1188926775431157506 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"halfmd5"},"halfMD5"),(0,t.yg)("p",null,"[Interprets]"," all the input parameters as strings and calculates the ",(0,t.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/MD5"},"MD5")," hash value for each of them. Then combines hashes, takes the first 8 bytes of the hash of the resulting string, and interprets them as ",(0,t.yg)("inlineCode",{parentName:"p"},"UInt64")," in big-endian byte order."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"halfMD5(par1, ...)\n")),(0,t.yg)("p",null,"The function is relatively slow (5 million short strings per second per processor core)."),(0,t.yg)("p",null,"Consider using the ","[sipHash64]"," function instead."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("p",null,"The function takes a variable number of input parameters. Arguments can be any of the ","[supported data types]","."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned Value")),(0,t.yg)("p",null,"An ","[UInt64]"," data type hash value."),(0,t.yg)("p",null,"Type: ",(0,t.yg)("inlineCode",{parentName:"p"},"Uini64")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT halfMD5(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS halfMD5hash, toTypeName(halfMD5hash) AS type;\n")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500halfMD5hash\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\n\u2502 236874400738930661 \u2502 UInt64 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"hivehash"},"hiveHash"),(0,t.yg)("p",null,"Calculates ",(0,t.yg)("inlineCode",{parentName:"p"},"HiveHash")," from a string."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT hiveHash('')\n")),(0,t.yg)("p",null,"This is just ","[JavaHash]"," with zeroed out sign bit. This function is used in ",(0,t.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Apache_Hive"},"Apache Hive")," for versions before 3.0. This hash function is neither fast nor having a good quality. The only reason to use it is when this algorithm is already used in another system and you have to calculate exactly the same result."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned value")),(0,t.yg)("p",null,"A ",(0,t.yg)("inlineCode",{parentName:"p"},"Int32")," data type hash value."),(0,t.yg)("p",null,"Type: ",(0,t.yg)("inlineCode",{parentName:"p"},"hiveHash")," ."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("p",null,"Query:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT hiveHash('Hello, world!');\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500hiveHash('Hello, world!')\u2500\u2510\n\u2502 267439093                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"inthash32"},"intHash32"),(0,t.yg)("p",null,"Calculates a 32-bit hash code from any type of integer."),(0,t.yg)("p",null,"This is a relatively fast non-cryptographic hash function of average quality for numbers."),(0,t.yg)("p",null,"TODO: need to re-confirm below sentences."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"intHash32(integer)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"integer")," \u2013 The integer.")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned value")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"32-bit hash code.")),(0,t.yg)("p",null,"Type:",(0,t.yg)("inlineCode",{parentName:"p"},"UInt32")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT intHash32(12072650598913549138);\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500intHash32(12072650598913549138)\u2500\u2510\n\u2502 3406876673                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"inthash64"},"intHash64"),(0,t.yg)("p",null,"Calculates a 64-bit hash code from any type of integer."),(0,t.yg)("p",null,"It works faster than intHash32. Average quality."),(0,t.yg)("p",null,"TODO: need to re-confirm below sentences."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"intHash64(integer)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"integer")," \u2013 The integer.")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned value")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"64-bit hash code.")),(0,t.yg)("p",null,"Type:",(0,t.yg)("inlineCode",{parentName:"p"},"UInt64")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT intHash64(12072650598913549138);\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500intHash32(12072650598913549138)\u2500\u2510\n\u2502 3406876673                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"javahash"},"javaHash"),(0,t.yg)("p",null,"Calculates ",(0,t.yg)("a",{parentName:"p",href:"http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/478a4add975b/src/share/classes/java/lang/String.java#l1452"},"JavaHash")," from a string. This hash function is neither fast nor having a good quality. The only reason to use it is when this algorithm is already used in another system and you have to calculate exactly the same result."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT javaHash('')\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"A ",(0,t.yg)("inlineCode",{parentName:"li"},"string"))),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned value")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"A ",(0,t.yg)("inlineCode",{parentName:"li"},"Int32")," data type hash value.")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("p",null,"Query:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT javaHash('Hello, world!');\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500javaHash('Hello, world!')\u2500\u2510\n\u2502 -1880044555               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"jumpconsistenthash"},"jumpConsistentHash"),(0,t.yg)("p",null,"Calculates JumpConsistentHash form a UInt64."),(0,t.yg)("p",null,"Accepts two arguments: a ",(0,t.yg)("inlineCode",{parentName:"p"},"UInt64"),"-type key and the number of buckets. Returns ",(0,t.yg)("inlineCode",{parentName:"p"},"Int32"),"."),(0,t.yg)("p",null,"For more information, see the link: ",(0,t.yg)("a",{parentName:"p",href:"https://arxiv.org/pdf/1406.2294.pdf"},"JumpConsistentHash")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"JumpConsistentHash(key, buckets)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"key")," \u2013 An ",(0,t.yg)("inlineCode",{parentName:"li"},"UInt64"),"- type key."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"buckets")," \u2013 A number of buckets.")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned value")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Result in ",(0,t.yg)("inlineCode",{parentName:"li"},"Int32"),".")),(0,t.yg)("p",null,"Type\uff1a",(0,t.yg)("inlineCode",{parentName:"p"},"Int32")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("p",null,"TODO: improve below example if necessary"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT jumpConsistentHash(18446744073709551615, 12);\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500jumpConsistentHash(18446744073709551615, 12)\u2500\u2510\n\u2502 10                                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"metrohash64"},"metroHash64"),(0,t.yg)("p",null,"Produces a 64-bit ",(0,t.yg)("a",{parentName:"p",href:"http://www.jandrewrogers.com/2015/05/27/metrohash/"},"MetroHash")," hash value."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"metroHash64(par1, ...)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("p",null,"The function takes a variable number of input parameters. Arguments can be any of the ","[supported data types]"," ."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned Value")),(0,t.yg)("p",null,"A ","[UInt64]"," data type hash value."),(0,t.yg)("p",null,"Type\uff1a",(0,t.yg)("inlineCode",{parentName:"p"},"UInt64")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT metroHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MetroHash, toTypeName(MetroHash) AS type;\n")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500MetroHash\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\n\u2502 15061233052885528061 \u2502 UInt64 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"murmurhash2_32"},"murmurHash2_32"),(0,t.yg)("p",null,"Produces a ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/aappleby/smhasher/"},"MurmurHash2")," hash value."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"murmurHash2_32(par1, ...)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("p",null,"Both functions take a variable number of input parameters. Arguments can be any of the ","[supported data types]"," ."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned Value")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"The ",(0,t.yg)("inlineCode",{parentName:"li"},"murmurHash2_32")," function returns hash value having the ","[UInt32]"," data type.")),(0,t.yg)("p",null,"Type: ",(0,t.yg)("inlineCode",{parentName:"p"},"Uint32")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT murmurHash2_32('test');\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500murmurHash2_32('test')\u2500\u2510\n\u2502 403862830              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"murmurhash2_64"},"murmurHash2_64"),(0,t.yg)("p",null,"Produces a ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/aappleby/smhasher"},"MurmurHash2")," hash value."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"murmurHash2_64(par1, ...)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("p",null,"Both functions take a variable number of input parameters. Arguments can be any of the supported data types ."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned Value")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"The ",(0,t.yg)("inlineCode",{parentName:"li"},"murmurHash2_64")," function returns hash value having the UInt64 data type.")),(0,t.yg)("p",null,"Type: ",(0,t.yg)("inlineCode",{parentName:"p"},"Uint64")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT murmurHash2_64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MurmurHash2, toTypeName(MurmurHash2) AS type;\n")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500MurmurHash2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\n\u2502 178997598777428518 \u2502 UInt64 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"murmurhash3_128"},"murmurHash3_128"),(0,t.yg)("p",null,"Produces a 128-bit ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/aappleby/smhasher"},"MurmurHash3")," hash value."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"murmurHash3_128( expr )\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"expr")," \u2014 Expressions returning a String -type value.")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned Value")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"A FixedString(16) data type hash value.")),(0,t.yg)("p",null,"Type: ",(0,t.yg)("inlineCode",{parentName:"p"},"FixedString(16)")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT hex(murmurHash3_128('example_string')) AS MurmurHash3, toTypeName(MurmurHash3) AS type;\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500MurmurHash3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\n\u2502 368A1A311CB7342253354B548E7E7E71 \u2502 String \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"murmurhash3_32"},"murmurHash3_32"),(0,t.yg)("p",null,"Produces a ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/aappleby/smhasher"},"MurmurHash3")," hash value."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"murmurHash3_32(par1, ...)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("p",null,"Both functions take a variable number of input parameters. Arguments can be any of the supported data types ."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned Value")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"The ",(0,t.yg)("inlineCode",{parentName:"li"},"murmurHash3_32")," function returns a UInt32 data type hash value.")),(0,t.yg)("p",null,"Type: ",(0,t.yg)("inlineCode",{parentName:"p"},"Uint32")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT murmurHash3_32(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MurmurHash3, toTypeName(MurmurHash3) AS type;\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500MurmurHash3\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\n\u2502 3163913960  \u2502 UInt32 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"murmurhash3_64"},"murmurHash3_64"),(0,t.yg)("p",null,"Produces a ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/aappleby/smhasher"},"MurmurHash3")," hash value."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"murmurHash3_64(par1, ...)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("p",null,"Both functions take a variable number of input parameters. Arguments can be any of the supported data types ."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned Value")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"The ",(0,t.yg)("inlineCode",{parentName:"li"},"murmurHash3_64")," function returns a UInt64 data type hash value.")),(0,t.yg)("p",null,"Type\uff1a",(0,t.yg)("inlineCode",{parentName:"p"},"Uint64")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT murmurHash3_64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MurmurHash3, toTypeName(MurmurHash3) AS type;\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500MurmurHash3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\n\u2502 12839777463072566684 \u2502 UInt64 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"siphash128"},"sipHash128"),(0,t.yg)("p",null,"Calculates SipHash from a string."),(0,t.yg)("p",null,"Accepts a String-type argument. Returns FixedString(16)."),(0,t.yg)("p",null,"Differs from sipHash64 in that the final xor-folding state is only done up to 128 bits."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"sipHash128(par1,...)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("p",null,"The function takes a variable number of input parameters. Arguments can be any of the supported data types ."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned Value")),(0,t.yg)("p",null,"A UInt64 data type hash value."),(0,t.yg)("p",null,"Type: ",(0,t.yg)("inlineCode",{parentName:"p"},"Uint64")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"select sipHash128('test sipHash128');\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500sipHash128('test sipHash128')\u2500\u2510\n\u2502 av'??\"????bk??:              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"siphash64"},"sipHash64"),(0,t.yg)("p",null,"Produces a 64-bit ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/veorq/SipHash/"},"SipHash")," hash value."),(0,t.yg)("p",null,"This is a cryptographic hash function. It works at least three times faster than the MD5 function."),(0,t.yg)("p",null,"Function interprets all the input parameters as strings and calculates the hash value for each of them. Then combines hashes by the following algorithm:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"After hashing all the input parameters, the function gets the array of hashes.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"Function takes the first and the second elements and calculates a hash for the array of them.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"Then the function takes the hash value, calculated at the previous step, and the third element of the initial hash array, and calculates a hash for the array of them.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"The previous step is repeated for all the remaining elements of the initial hash array."))),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"sipHash64(par1,...)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("p",null,"The function takes a variable number of input parameters. Arguments can be any of the supported data types ."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned Value")),(0,t.yg)("p",null,"A UInt64 data type hash value."),(0,t.yg)("p",null,"Type: ",(0,t.yg)("inlineCode",{parentName:"p"},"Uint64")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT sipHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS SipHash, toTypeName(SipHash) AS type;\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500SipHash\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2510\n\u2502 7934052906670448870 \u2502 UInt64 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("h2",{id:"xxhash32"},"xxHash32"),(0,t.yg)("p",null,"Calculates ",(0,t.yg)("inlineCode",{parentName:"p"},"xxHash")," from a string."),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"xxHash")," is an extremely fast non-cryptographic hash algorithm, working at RAM speed limit."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT xxHash32(s)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"s")," \u2013 The string.")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned value")),(0,t.yg)("p",null,"A ",(0,t.yg)("inlineCode",{parentName:"p"},"Uint32")," data type hash value."),(0,t.yg)("p",null,"Type: ",(0,t.yg)("inlineCode",{parentName:"p"},"UInt32")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT xxHash32('Hello, world!')\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500xxHash32('Hello, world!')\u2500\u2510\n\u2502 834093149                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"See Also")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"http://cyan4973.github.io/xxHash/"},"xxHash")," .")),(0,t.yg)("h2",{id:"xxhash64"},"xxHash64"),(0,t.yg)("p",null,"Calculates ",(0,t.yg)("inlineCode",{parentName:"p"},"xxHash")," from a string."),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"xxHash")," is an extremely fast non-cryptographic hash algorithm, working at RAM speed limit."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Syntax")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT xxHash64(s)\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"s")," \u2013 The string.")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returned value")),(0,t.yg)("p",null,"A ",(0,t.yg)("inlineCode",{parentName:"p"},"Uint64")," data type hash value."),(0,t.yg)("p",null,"Type: ",(0,t.yg)("inlineCode",{parentName:"p"},"UInt64")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Example")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT xxHash64('Hello, world!')\n")),(0,t.yg)("p",null,"Result:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-plain%20text"},"\u250c\u2500xxHash64('Hello, world!')\u2500\u2510\n\u2502 17691043854468224118      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"See Also")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"http://cyan4973.github.io/xxHash/"},"xxHash")," .")))}o.isMDXComponent=!0}}]);