"use strict";(self.webpackChunkbyconity=self.webpackChunkbyconity||[]).push([[9651],{8860:(e,t,a)=>{a.d(t,{xA:()=>u,yg:()=>h});var i=a(7953);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=i.createContext({}),c=function(e){var t=i.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(a),g=n,h=d["".concat(s,".").concat(g)]||d[g]||p[g]||r;return a?i.createElement(h,l(l({ref:t},u),{},{components:a})):i.createElement(h,l({ref:t},u))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:n,l[1]=o;for(var c=2;c<r;c++)l[c]=a[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,a)}g.displayName="MDXCreateElement"},4666:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=a(5890),n=(a(7953),a(8860));const r={title:"Hive External Table",tags:["Docs"]},l="Hive",o={unversionedId:"basic-guide/hive-external-table",id:"version-0.2.0/basic-guide/hive-external-table",title:"Hive External Table",description:"CnchHive is a table engine provided by ByConity, which supports federated query in the form of external tables, and users can directly accelerate data query without importing data. CnchHive supports querying data on both HDFS and S3 Hive table.",source:"@site/versioned_docs/version-0.2.0/basic-guide/hive-external-table.mdx",sourceDirName:"basic-guide",slug:"/basic-guide/hive-external-table",permalink:"/docs/0.2.0/basic-guide/hive-external-table",draft:!1,editUrl:"https://github.com/yxf-ops/yxf-ops.github.io/tree/main/versioned_docs/version-0.2.0/basic-guide/hive-external-table.mdx",tags:[{label:"Docs",permalink:"/docs/0.2.0/tags/docs"}],version:"0.2.0",frontMatter:{title:"Hive External Table",tags:["Docs"]},sidebar:"tutorialSidebar",previous:{title:"Hive External Catalog",permalink:"/docs/0.2.0/basic-guide/hive-external-catalog"},next:{title:"Monitor Cluster",permalink:"/docs/0.2.0/basic-guide/monitoring"}},s={},c=[{value:"Creating a Table",id:"creating-a-table",level:2},{value:"Table Settings",id:"table-settings",level:2},{value:"Example config a HDFS hive table",id:"example-config-a-hdfs-hive-table",level:3},{value:"Example config a S3 hive table",id:"example-config-a-s3-hive-table",level:3},{value:"Disk Cache Configuration",id:"disk-cache-configuration",level:2},{value:"Query Settings",id:"query-settings",level:2},{value:"disk_cache_mode",id:"disk_cache_mode",level:3},{value:"use_hive_metastore_filter",id:"use_hive_metastore_filter",level:3},{value:"use_hive_partition_filter",id:"use_hive_partition_filter",level:3},{value:"use_hive_split_level_filter",id:"use_hive_split_level_filter",level:3},{value:"Table Functions",id:"table-functions",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...a}=e;return(0,n.yg)(d,(0,i.A)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"hive"},"Hive"),(0,n.yg)("p",null,"CnchHive is a table engine provided by ByConity, which supports federated query in the form of external tables, and users can directly accelerate data query without importing data. CnchHive supports querying data on both HDFS and S3 Hive table."),(0,n.yg)("p",null,"Currently supports querying data files of Hive in Parquet and ORC formats."),(0,n.yg)("h2",{id:"creating-a-table"},"Creating a Table"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE [IF NOT EXISTS] [db.]hive_ext\nENGINE = CnchHive('thrift://127.0.0.1:9083', 'hive_db', 'hive_table')\n[SETTING vw_default = '']\n")),(0,n.yg)("p",null,"Table columns and partition columns will be automatically inferenced from hive metadata.\nManully specify column names and types is also supported."),(0,n.yg)("h2",{id:"table-settings"},"Table Settings"),(0,n.yg)("p",null,"CnchHive table settings is allowed to configure during table creation or though configuration file."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-xml"},"<yandex>\n  <hive>\n    <vw_default>vw_default</vw_default>\n  </hive>\n</yandex>\n")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"vw_default: virtual warehouse for executing select queryies"),(0,n.yg)("li",{parentName:"ul"},"hdfs_fs: hdfs namenode url."),(0,n.yg)("li",{parentName:"ul"},"endpoint: S3 enpoint"),(0,n.yg)("li",{parentName:"ul"},"region: S3 region"),(0,n.yg)("li",{parentName:"ul"},"ak_id: S3 access key"),(0,n.yg)("li",{parentName:"ul"},"ak_secret: S3 secret key")),(0,n.yg)("h3",{id:"example-config-a-hdfs-hive-table"},"Example config a HDFS hive table"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-xml"},"<hive>\n  <hdfs_fs>hdfs://127.0.0.1:9010</hdfs_fs>\n</hive>\n")),(0,n.yg)("h3",{id:"example-config-a-s3-hive-table"},"Example config a S3 hive table"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-xml"},"<hive>\n  <endpoint>http://127.0.0.1:9000</endpoint>\n  <ak_id>id</ak_id>\n  <ak_secret>secret</ak_secret>\n</hive>\n")),(0,n.yg)("h2",{id:"disk-cache-configuration"},"Disk Cache Configuration"),(0,n.yg)("p",null,"To enable disk cache for CnchHive, add it to ",(0,n.yg)("strong",{parentName:"p"},"worker.xml")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-xml"},"<yandex>\n  <disk_cache_strategies>\n    <Hive>\n      <disk_cache_dir>hive</disk_cache_dir>\n    </Hive>\n  </disk_cache_strategies>\n</yandex>\n")),(0,n.yg)("h2",{id:"query-settings"},"Query Settings"),(0,n.yg)("h3",{id:"disk_cache_mode"},"disk_cache_mode"),(0,n.yg)("p",null,"Whether to use disk cache in SELECT queries. Possible values:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"AUTO - USE disk cache when available."),(0,n.yg)("li",{parentName:"ul"},"SKIP_DISK_CACHE - Do not use disk cache.")),(0,n.yg)("p",null,"If cache misses, hive files will be cached in the backrgound."),(0,n.yg)("p",null,"default: AUTO"),(0,n.yg)("h3",{id:"use_hive_metastore_filter"},"use_hive_metastore_filter"),(0,n.yg)("p",null,"If enabled, CnchHive checks whether the query has partition key conditions\nwhich can be passed to hive metastore for restricting partitions. Hive metastore will return\na trimmed list of partitions based on the conditions. Hive metastore can only recognise simple\nconditions."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Example")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-sql"},"# Column d is the hive partition key, and hive has partition\n# d=1/, d=2/, d=3/\n\nSELECT * FROM hive_ext WHERE d = 1\n# Hive metastore will only return the path of d=1/ partition\n")),(0,n.yg)("p",null,"default: true"),(0,n.yg)("h3",{id:"use_hive_partition_filter"},"use_hive_partition_filter"),(0,n.yg)("p",null,"If enabled, CnchHive further does partition pruning on the list of partitions returned from hive metastore."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Example")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-sql"},"# Column d is the hive partition key, and hive has partition\n# d=20220203/, d=20220204/, d=20220205/\n\nSELECT * FROM hive_ext WHERE toDate(d) = '2022-02-03'\n# Hive metastore will return all three partitions, and CnchHive will do partition pruning. Only partition d=20220203/ will later be read.\n")),(0,n.yg)("p",null,"default: true"),(0,n.yg)("h3",{id:"use_hive_split_level_filter"},"use_hive_split_level_filter"),(0,n.yg)("p",null,"Parquet and ORC files have index data for each row group/stripe. If enabled, CnchHive will filter row groups/stripes."),(0,n.yg)("p",null,"default: false"),(0,n.yg)("h2",{id:"table-functions"},"Table Functions"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT count() FROM hive('thrift://127.0.0.1', 'hive_db', 'hive_table)\n")),(0,n.yg)("p",null,"Query the hive table without explicitly creating a table."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM hiveMetadata('thrift://127.0.0.1', 'hive_db', 'hive_table')\n")),(0,n.yg)("p",null,"Return the hive table storage description from the hive metastore."))}p.isMDXComponent=!0}}]);